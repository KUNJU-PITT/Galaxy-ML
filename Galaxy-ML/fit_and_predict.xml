<tool id="sklearn_fit_predict" name="Train or Predict" version="@VERSION@">
    <description>either fit a model or predict with a preffited model</description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command>
        <![CDATA[
        python "$sklearn_model_validation_script" '$inputs'
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
        <configfile name="sklearn_model_validation_script">
            <![CDATA[
import json

from imblearn.pipeline import Pipeline as imbPipeline
from sklearn.pipeline import Pipeline

WL_FILE = '$__tool_directory__/pk_whitelist.json'

exec(open('$__tool_directory__/iraps_classifier.py').read())
exec(open('$__tool_directory__/preprocessors.py').read())
exec(open('$__tool_directory__/feature_selectors.py').read())
exec(open('$__tool_directory__/model_validations.py').read())
exec(open('$__tool_directory__/utils.py').read(), globals())

warnings.filterwarnings('ignore')

input_json_path = sys.argv[1]
with open(input_json_path, 'r') as param_handler:
    params = json.load(param_handler)

## load pipeline
with open('$infile_pipeline', 'rb') as pipeline_handler:
    pipeline = load_model(pipeline_handler)

header = 'infer' if params['selected_tasks']['dataset_input']['header1'] else None
column_option = params['selected_tasks']['dataset_input']['column_selector_options_1']['selected_column_selector_option']
if column_option in ['by_index_number', 'all_but_by_index_number', 'by_header_name', 'all_but_by_header_name']:
    c = params['selected_tasks']['dataset_input']['column_selector_options_1']['col1']
else:
    c = None
X = read_columns(
        '$selected_tasks.dataset_input.infile1',
        c = c,
        c_option = column_option,
        sep='\t',
        header=header,
        parse_dates=True).astype(float)

#if $selected_tasks.selected_task == 'train':
header = 'infer' if params['selected_tasks']['dataset_input']['header2'] else None
column_option = params['selected_tasks']['dataset_input']['column_selector_options_2']['selected_column_selector_option2']
if column_option in ['by_index_number', 'all_but_by_index_number', 'by_header_name', 'all_but_by_header_name']:
    c = params['selected_tasks']['dataset_input']['column_selector_options_2']['col2']
else:
    c = None
y = read_columns(
        '$selected_tasks.dataset_input.infile2',
        c = c,
        c_option = column_option,
        sep='\t',
        header=header,
        parse_dates=True)
y = y.ravel()

pipeline.fit(X, y)

with open('$outfile_fit', 'wb') as output_handler:
    pickle.dump(pipeline, output_handler, pickle.HIGHEST_PROTOCOL)

#else:
if params['selected_tasks']['method'] == 'predict':
    predicted = pipeline.predict(X)
else:
    predicted = pipeline.predict_proba(X)

if len(predicted.shape) == 1:
    rval = pandas.DataFrame(predicted, columns=['Predicted'])
else:
    rval = pandas.DataFrame(predicted)

rval.to_csv(path_or_buf='$outfile_predict', sep='\t', header=True, index=False)
#end if
            ]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="selected_tasks">
            <param name="selected_task" type="select" label="Select a Classification Task">
                <option value="train" selected="true">Train a model</option>
                <option value="load">Load a model and predict</option>
            </param>
            <when value="train">
                <param name="infile_pipeline" type="data" format="zip" label="Choose the dataset containing unfitted model/pipeline object"/>
                <section name="dataset_input" title="DATASET INPUT" expanded="true">
                    <param name="infile1" type="data" format="tabular" label="Training samples dataset::"/>
                    <param name="header1" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="True" label="Does the dataset contain header:" />
                    <conditional name="column_selector_options_1">
                        <expand macro="samples_column_selector_options" multiple="true"/>
                    </conditional>
                    <param name="infile2" type="data" format="tabular" label="Dataset containing class labels or target values:"/>
                    <param name="header2" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="True" label="Does the dataset contain header:" />
                    <conditional name="column_selector_options_2">
                        <expand macro="samples_column_selector_options" column_option="selected_column_selector_option2" col_name="col2" multiple="False" infile="infile2"/>
                    </conditional>
                </section>
            </when>
            <when value="load">
                <param name="infile_pipeline" type="data" format="zip" label="Choose the dataset containing fitted model/pipeline object"/>
                <param argument="method" type="select" label="Invokes the passed method name of the passed model/pipeline">
                    <option value="predict" selected="true">predict</option>
                    <option value="predict_proba">predict_proba</option>
                </param>
                <section name="dataset_input" title="DATASET INPUT" expanded="true">
                    <param name="infile1" type="data" format="tabular" label="Dataset containing features to predict:"/>
                    <param name="header1" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="True" label="Does the dataset contain header:" />
                    <conditional name="column_selector_options_1">
                        <expand macro="samples_column_selector_options" multiple="true"/>
                    </conditional>
                </section>
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data format="tabular" name="outfile_predict" label="${tool.name} - prediction on ${on_string}">
            <filter>selected_tasks['selected_task'] == 'load'</filter>
        </data>
        <data format="zip" name="outfile_fit" label="${tool.name} - fitted on ${on_string}">
            <filter>selected_tasks['selected_task'] == 'train'</filter>
        </data>
    </outputs>
    
    <tests>
        <test/>
    </tests>
    <help>
        <![CDATA[
**What it does**
This tool includes model validation functions to evaluate estimator performance in the cross-validation approach. This tool is based on
sklearn.model_selection package.
For information about model validation functions and their parameter settings please refer to `Scikit-learn model_selection`_.

.. _`Scikit-learn model_selection`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.model_selection
        ]]>
    </help>
    <expand macro="sklearn_citation">
        <expand macro="skrebate_citation"/>
        <expand macro="xgboost_citation"/>
    </expand>
</tool>
